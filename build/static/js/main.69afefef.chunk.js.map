{"version":3,"sources":["Components/person.js","App.js","index.js"],"names":["Person","persons","setPersons","map","person","name","number","id","App","useState","useEffect","axios","get","then","response","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAuBeA,EAtBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAA0B,EAAjBC,WAQzB,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,8BACG,IACAA,EAAOC,KAFV,KAEkBD,EAAOE,SAFjBF,EAAOG,U,iBCiIRC,EAvIH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOR,EAAP,KAAgBC,EAAhB,KAuGA,OAhGAQ,qBAAU,WACRC,IAAMC,IAVM,gBAUOC,MAAK,SAACC,GACvBZ,EAAWY,EAASC,WAErB,IA6FD,gCACE,2CAsBA,8BACE,cAAC,EAAD,CAAQd,QAASA,EAASC,WAAYA,UClI9Cc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.69afefef.chunk.js","sourcesContent":["// import contactFunctions from '../Components/contactFunctions';\nconst Person = ({ persons, setPersons }) => {\n  //   const handleDelete = (id, name) => {\n  //     if (window.confirm(`Are you sure you want to delete ${name}`)) {\n  //       contactFunctions.deleteContact(id);\n  //       setPersons(persons.filter((person) => person.id !== id));\n  //     }\n  //   };\n\n  return (\n    <div>\n      {persons.map((person) => (\n        <p key={person.id}>\n          {' '}\n          {person.name}- {person.number}\n          {/* <button onClick={() => handleDelete(person.id, person.name)}>\n            delete\n          </button> */}\n        </p>\n      ))}\n    </div>\n  );\n};\nexport default Person;\n","import { useState, useEffect } from 'react';\nimport Person from './Components/person';\n// import contactFunctions from './Components/contactFunctions';\n// import Notification from './Components/notification';\nimport axios from 'axios';\nconst baseUrl = '/api/persons';\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  // const [newName, setNewName] = useState('');\n  // const [newNumber, setNewNumber] = useState('');\n  // const [searchName, setSearchName] = useState('');\n  // const [result, setResult] = useState(false);\n  // const [message, setMessage] = useState(null);\n  // const [ErrorMessageType, setErrorMessageType] = useState(null);\n  useEffect(() => {\n    axios.get(baseUrl).then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  // const handleContactAddition = (event) => {\n  //   setNewName(event.target.value);\n  // };\n  // const handleNumberAddition = (event) => {\n  //   setNewNumber(event.target.value);\n  // };\n  // const handleSearchFunction = (event) => {\n  //   setSearchName(event.target.value);\n  // };\n  // const addContact = (event) => {\n  //   event.preventDefault();\n\n  //   const found = persons.find(\n  //     (person) => person.name.toString().toLowerCase() === newName.toLowerCase()\n  //   );\n\n  //   if (found) {\n  //     if (\n  //       window.confirm(\n  //         `${newName} is already on the contacts list.Do you want to overwrite?`\n  //       )\n  //     ) {\n  //       found.number = newNumber;\n  //       const notAvailable = contactFunctions.updateContact(found);\n  //       console.log(notAvailable);\n  //       if (notAvailable === 0) {\n  //         setMessage(\n  //           `Contact '${newName}' has already been removed from the contact list`\n  //         );\n  //         setErrorMessageType(true);\n  //       } else {\n  //         setMessage(`Contact '${newName}' is updated`);\n  //         setErrorMessageType(false);\n  //       }\n\n  //       setTimeout(() => {\n  //         setMessage(null);\n  //       }, 5000);\n  //     }\n  //   } else {\n  //     const idGen = contactFunctions.handleId();\n  //     const newContact = {\n  //       name: newName,\n  //       number: newNumber,\n  //       id: idGen,\n  //     };\n\n  //     setPersons(\n  //       persons.concat({\n  //         name: newName,\n  //         number: newNumber,\n  //         id: idGen,\n  //       })\n  //     );\n  //     contactFunctions.saveContact({ newContact });\n  //     setMessage(`Contact '${newName}' is added to the contacts list`);\n  //     setErrorMessageType(false);\n  //     setTimeout(() => {\n  //       setMessage(null);\n  //     }, 5000);\n  //   }\n  // };\n  // const searchContact = (event) => {\n  //   event.preventDefault();\n  //   let resultName = '';\n  //   let resultNumber = 0;\n  //   for (let i = 0; i < persons.length; i++) {\n  //     if (\n  //       persons[i].name.toString().toLowerCase() === searchName.toLowerCase()\n  //     ) {\n  //       resultName = persons[i].name;\n  //       resultNumber = persons[i].number;\n  //     }\n  //   }\n\n  //   if (resultNumber !== 0) {\n  //     const idGen = contactFunctions.handleId();\n  //     const newContact = [\n  //       { name: resultName, number: resultNumber, id: idGen },\n  //     ];\n  //     setPersons(newContact);\n  //     setResult(true);\n  //   } else {\n  //     setMessage(`Contact '${searchName}' is not on the contacts list`);\n  //     setErrorMessageType(true);\n  //     setTimeout(() => {\n  //       setMessage(null);\n  //     }, 5000);\n  //   }\n  // };\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {/* <Notification message={message} errorMessageType={ErrorMessageType} />\n  <form onSubmit={searchContact}>\n    Filter shown with\n    <input value={searchName} onChange={handleSearchFunction} />\n    <div>\n      <button>Search</button>\n    </div>\n  </form>\n  <form onSubmit={addContact}>\n    <div>\n      <p>\n        Name: <input value={newName} onChange={handleContactAddition} />\n      </p>\n      Phone: <input value={newNumber} onChange={handleNumberAddition} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n  <h2>{result ? 'Search Results' : 'Numbers'}</h2>\n  ... */}\n      <div>\n        <Person persons={persons} setPersons={setPersons} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}